pipeline {

	/*
	* Run everything on an existing agent configured with a label 'docker'.
	* This agent will need docker, git and a jdk installed at a minimum.
	* https://stackoverflow.com/questions/26472586/upgrade-docker-on-centos-7
	* install latest docker
	* start docker demon
	* "chmod 666 /var/run/docker.sock"
	*/
	/*
	* https://xerosecurity.com/wordpress/documentation/
	*/

    agent {
        node {
            label 'master'
        }
    }

    // using the Timestamper plugin we can add timestamps to the console log
    options {
        timestamps()
        disableConcurrentBuilds()
    }
    environment {
        //Use Pipeline Utility Steps plugin to read information from pom.xml into env variables
        IMAGE = 'sn1per'
        VERSION = '1'
        
        //Use Pipeline Utility Steps for python env variables
        //IMAGE = 'simplejavaproject'
        //VERSION = readMavenPom().getVersion()
        //VERSION = '2.2.2'
        
	//registry = "myreg/docker-test"
	//imagename = "cloudties/dockerimage"
	//registryCredential = 'cloudties123$'
	//dockerImage = ''
    }
    
    stages {
        stage('Clone Python repository') {
              steps {
		   script {
			checkout(
			[
				$class: 'GitSCM',
				branches: [
				[name: '*/master']
				],
				doGenerateSubmoduleConfigurations: false, 
				extensions: [], 
				submoduleCfg: [], 
				userRemoteConfigs: [
				[
				credentialsId: 'cloudties',
				url: 'https://github.com/1N3/Sn1per.git']
				]
			])
                 }}
        }
        stage('Python build') {
            agent {
                docker {
                    /*
                     * Reuse the workspace on the agent defined at top-level of
                     * Pipeline but run inside a container.
                     */
                    image 'kalilinux/kali-rolling'
                    reuseNode true
                }
            }
		when {
			expression { false == true }
		}
            steps {    
              script {
                sh '''
                    set -eux pipefail
                    sh 'pip3 install -r requirements.txt'
                '''
                }
            }
        }
        stage('Build docker image') {
             steps {
               script {
                sh '''
			docker version
			docker build -t ${IMAGE} .
			docker tag ${IMAGE} ${IMAGE}:${VERSION}
			docker run -d ${IMAGE}:${VERSION} /bin/bash
			#docker push ${IMAGE}:${VERSION}
                '''
                }
            }
        }
        stage('Run Python app') {
            agent {
               label 'master'
            }
            steps {    
              script {
		sh "docker exec -it $(docker ps | grep sn1per | awk '{print $1}') /bin/sh  -c 'sniper -t https://www.cloudties.in'"
                }
            }
        }
        stage('Remove Unused docker image') {
             steps {
               script {
			//sh "docker rmi ${IMAGE}:${VERSION}"
			//sh "docker rmi ${IMAGE}:latest"
			sh "docker image ls"
                }
            }
        }
    }
}	